// source: MSD.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global = function () {
  return this || window || global || self || Function("return this")();
}.call(null);

goog.exportSymbol("ss_snet_SS.Audio", null, global);
goog.exportSymbol("ss_snet_SS.Output_Audio", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
ss_snet_SS.Audio = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(ss_snet_SS.Audio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  ss_snet_SS.Audio.displayName = "ss_snet_SS.Audio";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
ss_snet_SS.Output_Audio = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(ss_snet_SS.Output_Audio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  ss_snet_SS.Output_Audio.displayName = "ss_snet_SS.Output_Audio";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  ss_snet_SS.Audio.prototype.toObject = function (opt_includeInstance) {
    return ss_snet_SS.Audio.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!ss_snet_SS.Audio} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  ss_snet_SS.Audio.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        data: msg.getData_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!ss_snet_SS.Audio}
 */
ss_snet_SS.Audio.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new ss_snet_SS.Audio();
  return ss_snet_SS.Audio.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!ss_snet_SS.Audio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!ss_snet_SS.Audio}
 */
ss_snet_SS.Audio.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
ss_snet_SS.Audio.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  ss_snet_SS.Audio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!ss_snet_SS.Audio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
ss_snet_SS.Audio.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
ss_snet_SS.Audio.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
ss_snet_SS.Audio.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
ss_snet_SS.Audio.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!ss_snet_SS.Audio} returns this
 */
ss_snet_SS.Audio.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  ss_snet_SS.Output_Audio.prototype.toObject = function (opt_includeInstance) {
    return ss_snet_SS.Output_Audio.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!ss_snet_SS.Output_Audio} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  ss_snet_SS.Output_Audio.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        firstSpeaker: msg.getFirstSpeaker_asB64(),
        secondSpeaker: msg.getSecondSpeaker_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!ss_snet_SS.Output_Audio}
 */
ss_snet_SS.Output_Audio.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new ss_snet_SS.Output_Audio();
  return ss_snet_SS.Output_Audio.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!ss_snet_SS.Output_Audio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!ss_snet_SS.Output_Audio}
 */
ss_snet_SS.Output_Audio.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setFirstSpeaker(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSecondSpeaker(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
ss_snet_SS.Output_Audio.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  ss_snet_SS.Output_Audio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!ss_snet_SS.Output_Audio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
ss_snet_SS.Output_Audio.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getFirstSpeaker_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getSecondSpeaker_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional bytes first_speaker = 1;
 * @return {!(string|Uint8Array)}
 */
ss_snet_SS.Output_Audio.prototype.getFirstSpeaker = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes first_speaker = 1;
 * This is a type-conversion wrapper around `getFirstSpeaker()`
 * @return {string}
 */
ss_snet_SS.Output_Audio.prototype.getFirstSpeaker_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getFirstSpeaker()));
};

/**
 * optional bytes first_speaker = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFirstSpeaker()`
 * @return {!Uint8Array}
 */
ss_snet_SS.Output_Audio.prototype.getFirstSpeaker_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getFirstSpeaker()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!ss_snet_SS.Output_Audio} returns this
 */
ss_snet_SS.Output_Audio.prototype.setFirstSpeaker = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes second_speaker = 2;
 * @return {!(string|Uint8Array)}
 */
ss_snet_SS.Output_Audio.prototype.getSecondSpeaker = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes second_speaker = 2;
 * This is a type-conversion wrapper around `getSecondSpeaker()`
 * @return {string}
 */
ss_snet_SS.Output_Audio.prototype.getSecondSpeaker_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSecondSpeaker()));
};

/**
 * optional bytes second_speaker = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecondSpeaker()`
 * @return {!Uint8Array}
 */
ss_snet_SS.Output_Audio.prototype.getSecondSpeaker_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSecondSpeaker()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!ss_snet_SS.Output_Audio} returns this
 */
ss_snet_SS.Output_Audio.prototype.setSecondSpeaker = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

goog.object.extend(exports, ss_snet_SS);
