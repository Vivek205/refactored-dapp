// source: t_glm.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global = function () {
  return this || window || global || self || Function("return this")();
}.call(null);

var training_pb = require("./training_pb.js");
goog.object.extend(proto, training_pb);
goog.exportSymbol("vits_naint_VITSTrainingService.InferenceRequest", null, global);
goog.exportSymbol("vits_naint_VITSTrainingService.InferenceResponse", null, global);
goog.exportSymbol("vits_naint_VITSTrainingService.TrainingRequest", null, global);
goog.exportSymbol("vits_naint_VITSTrainingService.TrainingResponse", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
vits_naint_VITSTrainingService.InferenceRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(vits_naint_VITSTrainingService.InferenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  vits_naint_VITSTrainingService.InferenceRequest.displayName = "vits_naint_VITSTrainingService.InferenceRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
vits_naint_VITSTrainingService.InferenceResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(vits_naint_VITSTrainingService.InferenceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  vits_naint_VITSTrainingService.InferenceResponse.displayName = "vits_naint_VITSTrainingService.InferenceResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
vits_naint_VITSTrainingService.TrainingRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(vits_naint_VITSTrainingService.TrainingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  vits_naint_VITSTrainingService.TrainingRequest.displayName = "vits_naint_VITSTrainingService.TrainingRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
vits_naint_VITSTrainingService.TrainingResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(vits_naint_VITSTrainingService.TrainingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  vits_naint_VITSTrainingService.TrainingResponse.displayName = "vits_naint_VITSTrainingService.TrainingResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  vits_naint_VITSTrainingService.InferenceRequest.prototype.toObject = function (opt_includeInstance) {
    return vits_naint_VITSTrainingService.InferenceRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!vits_naint_VITSTrainingService.InferenceRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  vits_naint_VITSTrainingService.InferenceRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        modelId: jspb.Message.getFieldWithDefault(msg, 1, ""),
        data: jspb.Message.getFieldWithDefault(msg, 2, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!vits_naint_VITSTrainingService.InferenceRequest}
 */
vits_naint_VITSTrainingService.InferenceRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new vits_naint_VITSTrainingService.InferenceRequest();
  return vits_naint_VITSTrainingService.InferenceRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!vits_naint_VITSTrainingService.InferenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!vits_naint_VITSTrainingService.InferenceRequest}
 */
vits_naint_VITSTrainingService.InferenceRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setModelId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
vits_naint_VITSTrainingService.InferenceRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  vits_naint_VITSTrainingService.InferenceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!vits_naint_VITSTrainingService.InferenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
vits_naint_VITSTrainingService.InferenceRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getModelId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string model_id = 1;
 * @return {string}
 */
vits_naint_VITSTrainingService.InferenceRequest.prototype.getModelId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!vits_naint_VITSTrainingService.InferenceRequest} returns this
 */
vits_naint_VITSTrainingService.InferenceRequest.prototype.setModelId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string data = 2;
 * @return {string}
 */
vits_naint_VITSTrainingService.InferenceRequest.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!vits_naint_VITSTrainingService.InferenceRequest} returns this
 */
vits_naint_VITSTrainingService.InferenceRequest.prototype.setData = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  vits_naint_VITSTrainingService.InferenceResponse.prototype.toObject = function (opt_includeInstance) {
    return vits_naint_VITSTrainingService.InferenceResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!vits_naint_VITSTrainingService.InferenceResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  vits_naint_VITSTrainingService.InferenceResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        modelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
        result: jspb.Message.getFieldWithDefault(msg, 3, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!vits_naint_VITSTrainingService.InferenceResponse}
 */
vits_naint_VITSTrainingService.InferenceResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new vits_naint_VITSTrainingService.InferenceResponse();
  return vits_naint_VITSTrainingService.InferenceResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!vits_naint_VITSTrainingService.InferenceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!vits_naint_VITSTrainingService.InferenceResponse}
 */
vits_naint_VITSTrainingService.InferenceResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setModelId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setResult(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
vits_naint_VITSTrainingService.InferenceResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  vits_naint_VITSTrainingService.InferenceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!vits_naint_VITSTrainingService.InferenceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
vits_naint_VITSTrainingService.InferenceResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getModelId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
vits_naint_VITSTrainingService.InferenceResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};

/**
 * @param {boolean} value
 * @return {!vits_naint_VITSTrainingService.InferenceResponse} returns this
 */
vits_naint_VITSTrainingService.InferenceResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string model_id = 2;
 * @return {string}
 */
vits_naint_VITSTrainingService.InferenceResponse.prototype.getModelId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!vits_naint_VITSTrainingService.InferenceResponse} returns this
 */
vits_naint_VITSTrainingService.InferenceResponse.prototype.setModelId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string result = 3;
 * @return {string}
 */
vits_naint_VITSTrainingService.InferenceResponse.prototype.getResult = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!vits_naint_VITSTrainingService.InferenceResponse} returns this
 */
vits_naint_VITSTrainingService.InferenceResponse.prototype.setResult = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  vits_naint_VITSTrainingService.TrainingRequest.prototype.toObject = function (opt_includeInstance) {
    return vits_naint_VITSTrainingService.TrainingRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!vits_naint_VITSTrainingService.TrainingRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  vits_naint_VITSTrainingService.TrainingRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        modelId: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!vits_naint_VITSTrainingService.TrainingRequest}
 */
vits_naint_VITSTrainingService.TrainingRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new vits_naint_VITSTrainingService.TrainingRequest();
  return vits_naint_VITSTrainingService.TrainingRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!vits_naint_VITSTrainingService.TrainingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!vits_naint_VITSTrainingService.TrainingRequest}
 */
vits_naint_VITSTrainingService.TrainingRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setModelId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
vits_naint_VITSTrainingService.TrainingRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  vits_naint_VITSTrainingService.TrainingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!vits_naint_VITSTrainingService.TrainingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
vits_naint_VITSTrainingService.TrainingRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getModelId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string model_id = 1;
 * @return {string}
 */
vits_naint_VITSTrainingService.TrainingRequest.prototype.getModelId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!vits_naint_VITSTrainingService.TrainingRequest} returns this
 */
vits_naint_VITSTrainingService.TrainingRequest.prototype.setModelId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  vits_naint_VITSTrainingService.TrainingResponse.prototype.toObject = function (opt_includeInstance) {
    return vits_naint_VITSTrainingService.TrainingResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!vits_naint_VITSTrainingService.TrainingResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  vits_naint_VITSTrainingService.TrainingResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        message: jspb.Message.getFieldWithDefault(msg, 2, ""),
        modelId: jspb.Message.getFieldWithDefault(msg, 3, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!vits_naint_VITSTrainingService.TrainingResponse}
 */
vits_naint_VITSTrainingService.TrainingResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new vits_naint_VITSTrainingService.TrainingResponse();
  return vits_naint_VITSTrainingService.TrainingResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!vits_naint_VITSTrainingService.TrainingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!vits_naint_VITSTrainingService.TrainingResponse}
 */
vits_naint_VITSTrainingService.TrainingResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setModelId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
vits_naint_VITSTrainingService.TrainingResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  vits_naint_VITSTrainingService.TrainingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!vits_naint_VITSTrainingService.TrainingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
vits_naint_VITSTrainingService.TrainingResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getModelId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
vits_naint_VITSTrainingService.TrainingResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};

/**
 * @param {boolean} value
 * @return {!vits_naint_VITSTrainingService.TrainingResponse} returns this
 */
vits_naint_VITSTrainingService.TrainingResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
vits_naint_VITSTrainingService.TrainingResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!vits_naint_VITSTrainingService.TrainingResponse} returns this
 */
vits_naint_VITSTrainingService.TrainingResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string model_id = 3;
 * @return {string}
 */
vits_naint_VITSTrainingService.TrainingResponse.prototype.getModelId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!vits_naint_VITSTrainingService.TrainingResponse} returns this
 */
vits_naint_VITSTrainingService.TrainingResponse.prototype.setModelId = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

goog.object.extend(exports, vits_naint_VITSTrainingService);
